{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/ErrorBoundary.js","Components/Scroll.js","constants.js","Container/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","Robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflow","height","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","console","log","searchField","searchRobots","requestRobots","robots","isPending","dispatch","xyz","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","useEffect","filteredRobots","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Text","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49e53a3c.chunk.js","sourcesContent":["import React from \"react\"; \r\n\r\nconst Card=({name,email,id}) =>{\r\n    return(\r\n       <div className='tc bg-light-green dib br3 pa3 na2 grow bw2 shadow-5'>\r\n           <img alt='robots' src={`https://robohash.org/${id}`}/>\r\n               <div>\r\n                   <h2>{name}</h2>\r\n                   <p>{email}</p>\r\n               </div>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card';\r\n\r\nconst CardList =({Robots}) => {\r\n    // if(true) {\r\n    //     throw new Error('NOOOOO');\r\n    // }\r\n    return(\r\n        <div>\r\n            {\r\n                Robots.map((user,i)=>{\r\n                    return(\r\n                        <Card\r\n                        key={i}\r\n                        id={Robots[i].id}\r\n                        name={Robots[i].name}\r\n                        email={Robots[i].email}\r\n                        />\r\n                    );\r\n                }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n    return(\r\n       <div className='pa2 ma3'> \r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type ='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}\r\n            />\r\n       </div>     \r\n    );\r\n}\r\nexport default SearchBox;","import React,{Component} from \"react\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info) {\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return<h1>Ooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React from \"react\";\r\n\r\nconst Scroll= (props) =>{\r\n    return (\r\n        <div style={{overflow:'scroll' ,height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React,{useEffect} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../Components/CardList\";\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport ErrorBoundary from \"../Components/ErrorBoundary\";\r\nimport Scroll from '../Components/Scroll';\r\nimport {requestRobots, setSearchField} from '../actions';\r\n\r\n\r\n\r\nfunction App(props) {\r\n\r\n\r\n    const {onRequestRobots,Robots} = props\r\n\r\n    console.log(props, 'sdfdsf')\r\n    useEffect(()=> {\r\n       onRequestRobots()\r\n    },[onRequestRobots]) //only run if count changes.\r\n\r\n\r\n\r\n    const onSearchChange = (event)=> {\r\n        props.xyz(event)\r\n    }\r\n\r\n    const filteredRobots = Robots.filter(Robots=>{\r\n        return Robots.name.toLowerCase().includes(props.searchField.toLowerCase());\r\n    })\r\n    return(\r\n        <div className='tc'>\r\n        <h1 className='f1'>ROBOFRIENDS</h1>\r\n        {/* <button onClick={()=>setCount(count+1)}>Click Me!</button> */}\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n            <ErrorBoundary>\r\n            <CardList Robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n        </Scroll>\r\n        </div>\r\n    );\r\n    }\r\n\r\n\r\n    const mapStateToProps = (state) =>{\r\n        console.log(state, 'domrh')\r\n        return{\r\n            searchField: state.searchRobots.searchField,\r\n            Robots: state.requestRobots.robots,\r\n            isPending: state.requestRobots.isPending,\r\n            error: state.requestRobots.error\r\n        }\r\n    }\r\n    const mapDispatchToProps = (dispatch) => {\r\n        return{\r\n            xyz:(event) => dispatch(setSearchField(event.target.value)),\r\n            onRequestRobots:() => dispatch(requestRobots())\r\n        }\r\n    }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD ,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) =>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \r\n    CHANGE_SEARCH_FIELD ,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={payload:Text}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n        return {\r\n            ...state,\r\n            searchField: action.payload,\r\n        };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nconst initialStateRobots={\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\n\r\nexport const requestRobots = (state=initialStateRobots,action={}) =>{\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {\r\n                ...state,\r\n                isPending:true,\r\n            };\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return{\r\n                ...state,\r\n                robots:action.payload,\r\n            };\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return{\r\n                ...state,\r\n                error:action.payload,\r\n                isPending:false,\r\n            };\r\n        default:\r\n            return state;        \r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport { createStore, applyMiddleware,combineReducers } from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport  ThunkMiddleware  from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './Container/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { searchRobots,requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots,requestRobots})\r\nconst store = \r\n    createStore(rootReducer, applyMiddleware(ThunkMiddleware, logger))\r\n\r\nReactDOM.render( \r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()"],"sourceRoot":""}